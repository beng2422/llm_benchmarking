[
  {
    "id": 1,
    "language": "python",
    "difficulty": "easy",
    "category": "algorithms",
    "title": "Sum of Two Numbers",
    "description": "Write a function that takes two numbers and returns their sum.",
    "function_signature": "def add_numbers(a, b):",
    "test_cases": [
      {"input": {"a": 5, "b": 3}, "expected_output": 8},
      {"input": {"a": -2, "b": 7}, "expected_output": 5},
      {"input": {"a": 0, "b": 0}, "expected_output": 0}
    ],
    "expected_code": "def add_numbers(a, b):\n    return a + b"
  },
  {
    "id": 2,
    "language": "python",
    "difficulty": "easy",
    "category": "algorithms",
    "title": "Find Maximum in List",
    "description": "Write a function that finds the maximum number in a list.",
    "function_signature": "def find_max(numbers):",
    "test_cases": [
      {"input": {"numbers": [1, 5, 3, 9, 2]}, "expected_output": 9},
      {"input": {"numbers": [-1, -5, -3]}, "expected_output": -1},
      {"input": {"numbers": [42]}, "expected_output": 42}
    ],
    "expected_code": "def find_max(numbers):\n    return max(numbers)"
  },
  {
    "id": 3,
    "language": "python",
    "difficulty": "medium",
    "category": "algorithms",
    "title": "Fibonacci Sequence",
    "description": "Write a function that returns the nth Fibonacci number.",
    "function_signature": "def fibonacci(n):",
    "test_cases": [
      {"input": {"n": 0}, "expected_output": 0},
      {"input": {"n": 1}, "expected_output": 1},
      {"input": {"n": 5}, "expected_output": 5},
      {"input": {"n": 10}, "expected_output": 55}
    ],
    "expected_code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"
  },
  {
    "id": 4,
    "language": "python",
    "difficulty": "medium",
    "category": "data_structures",
    "title": "Reverse String",
    "description": "Write a function that reverses a string without using built-in reverse methods.",
    "function_signature": "def reverse_string(s):",
    "test_cases": [
      {"input": {"s": "hello"}, "expected_output": "olleh"},
      {"input": {"s": "world"}, "expected_output": "dlrow"},
      {"input": {"s": ""}, "expected_output": ""},
      {"input": {"s": "a"}, "expected_output": "a"}
    ],
    "expected_code": "def reverse_string(s):\n    return s[::-1]"
  },
  {
    "id": 5,
    "language": "python",
    "difficulty": "hard",
    "category": "algorithms",
    "title": "Binary Search",
    "description": "Implement binary search to find a target value in a sorted array.",
    "function_signature": "def binary_search(arr, target):",
    "test_cases": [
      {"input": {"arr": [1, 3, 5, 7, 9], "target": 5}, "expected_output": 2},
      {"input": {"arr": [1, 3, 5, 7, 9], "target": 1}, "expected_output": 0},
      {"input": {"arr": [1, 3, 5, 7, 9], "target": 9}, "expected_output": 4},
      {"input": {"arr": [1, 3, 5, 7, 9], "target": 4}, "expected_output": -1}
    ],
    "expected_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
  },
  {
    "id": 6,
    "language": "javascript",
    "difficulty": "easy",
    "category": "algorithms",
    "title": "Array Sum",
    "description": "Write a function that calculates the sum of all numbers in an array.",
    "function_signature": "function sumArray(arr) {",
    "test_cases": [
      {"input": {"arr": [1, 2, 3, 4, 5]}, "expected_output": 15},
      {"input": {"arr": [-1, -2, -3]}, "expected_output": -6},
      {"input": {"arr": []}, "expected_output": 0}
    ],
    "expected_code": "function sumArray(arr) {\n    return arr.reduce((sum, num) => sum + num, 0);\n}"
  },
  {
    "id": 7,
    "language": "javascript",
    "difficulty": "medium",
    "category": "algorithms",
    "title": "Palindrome Checker",
    "description": "Write a function that checks if a string is a palindrome (ignoring case and non-alphanumeric characters).",
    "function_signature": "function isPalindrome(str) {",
    "test_cases": [
      {"input": {"str": "racecar"}, "expected_output": true},
      {"input": {"str": "A man a plan a canal Panama"}, "expected_output": true},
      {"input": {"str": "hello"}, "expected_output": false},
      {"input": {"str": ""}, "expected_output": true}
    ],
    "expected_code": "function isPalindrome(str) {\n    const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');\n    return cleaned === cleaned.split('').reverse().join('');\n}"
  },
  {
    "id": 8,
    "language": "javascript",
    "difficulty": "hard",
    "category": "algorithms",
    "title": "Two Sum",
    "description": "Given an array of integers and a target sum, find two numbers that add up to the target.",
    "function_signature": "function twoSum(nums, target) {",
    "test_cases": [
      {"input": {"nums": [2, 7, 11, 15], "target": 9}, "expected_output": [0, 1]},
      {"input": {"nums": [3, 2, 4], "target": 6}, "expected_output": [1, 2]},
      {"input": {"nums": [3, 3], "target": 6}, "expected_output": [0, 1]}
    ],
    "expected_code": "function twoSum(nums, target) {\n    const map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        map.set(nums[i], i);\n    }\n    return [];\n}"
  },
  {
    "id": 9,
    "language": "java",
    "difficulty": "easy",
    "category": "algorithms",
    "title": "Factorial",
    "description": "Write a method that calculates the factorial of a number.",
    "function_signature": "public static int factorial(int n) {",
    "test_cases": [
      {"input": {"n": 0}, "expected_output": 1},
      {"input": {"n": 1}, "expected_output": 1},
      {"input": {"n": 5}, "expected_output": 120},
      {"input": {"n": 3}, "expected_output": 6}
    ],
    "expected_code": "public static int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}"
  },
  {
    "id": 10,
    "language": "java",
    "difficulty": "medium",
    "category": "data_structures",
    "title": "Valid Parentheses",
    "description": "Check if a string has valid parentheses (brackets, braces, parentheses).",
    "function_signature": "public static boolean isValid(String s) {",
    "test_cases": [
      {"input": {"s": "()"}, "expected_output": true},
      {"input": {"s": "()[]{}"}, "expected_output": true},
      {"input": {"s": "(]"}, "expected_output": false},
      {"input": {"s": "([)]"}, "expected_output": false},
      {"input": {"s": ""}, "expected_output": true}
    ],
    "expected_code": "public static boolean isValid(String s) {\n    Stack<Character> stack = new Stack<>();\n    for (char c : s.toCharArray()) {\n        if (c == '(') stack.push(')');\n        else if (c == '[') stack.push(']');\n        else if (c == '{') stack.push('}');\n        else if (stack.isEmpty() || stack.pop() != c) return false;\n    }\n    return stack.isEmpty();\n}"
  },
  {
    "id": 11,
    "language": "python",
    "difficulty": "easy",
    "category": "data_processing",
    "title": "Count Words",
    "description": "Write a function that counts the number of words in a string.",
    "function_signature": "def count_words(text):",
    "test_cases": [
      {"input": {"text": "Hello world"}, "expected_output": 2},
      {"input": {"text": "This is a test sentence"}, "expected_output": 5},
      {"input": {"text": ""}, "expected_output": 0},
      {"input": {"text": "Single"}, "expected_output": 1}
    ],
    "expected_code": "def count_words(text):\n    return len(text.split())"
  },
  {
    "id": 12,
    "language": "python",
    "difficulty": "medium",
    "category": "data_processing",
    "title": "Remove Duplicates",
    "description": "Write a function that removes duplicates from a list while preserving order.",
    "function_signature": "def remove_duplicates(lst):",
    "test_cases": [
      {"input": {"lst": [1, 2, 2, 3, 4, 4, 5]}, "expected_output": [1, 2, 3, 4, 5]},
      {"input": {"lst": [1, 1, 1, 1]}, "expected_output": [1]},
      {"input": {"lst": []}, "expected_output": []},
      {"input": {"lst": [1, 2, 3]}, "expected_output": [1, 2, 3]}
    ],
    "expected_code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"
  }
]
